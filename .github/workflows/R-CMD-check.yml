# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions

on: [push, pull_request, workflow_dispatch]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Install system dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          # needed for package units?
          sudo apt install libudunits2-dev
          # needed for package rgdal?
          sudo apt-get install gdal-bin proj-bin libgdal-dev libproj-dev
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install system dependencies for Windows/OSX
        run: |
          remotes::install_deps(dependencies=TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Check Ubuntu
        if: runner.os == 'Linux'
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-install", "--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Check Windows or MacOS
        if: runner.os != 'Linux'
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Run integrated tests via testthat on ubuntu
        if: runner.os == 'Linux'
        run: |
          devtools::install_local()
          devtools::install_deps(dependencies=TRUE)
          out <- devtools::test(stop_on_failure=TRUE)
          print(getwd())
          print(ls())
          print(str(out))
          file.copy('VAST.Rcheck/tests/testthat.Rout', to='check/testthat.Rout')
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
