% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reload_model.R
\name{reload_model}
\alias{reload_model}
\title{Reload a VAST model}
\usage{
reload_model(
  x,
  check_gradient = TRUE,
  CompileDir = system.file("executables", package = "VAST"),
  Version = x$settings$Version,
  framework = x$input_args$model_args_input$framework,
  Obj = x$tmb_list$Obj
)
}
\arguments{
\item{x}{Output from \code{\link{fit_model}}, potentially with DLLs not linked}

\item{check_gradient}{Whether to check the gradients of the reloaded model}

\item{CompileDir}{a directory where the CPP file is copied, copiled, and run
(must have write privileges or else the function will crash); by default uses \code{TmbDir} (OPTIONAL)}

\item{Version}{Which CPP version to use.  If missing, defaults to latest version
using \code{\link[FishStatsUtils]{get_latest_version}}.
Can be used to specify using an older CPP, to maintain backwards compatibility.}

\item{framework}{Which AD framework to use ('TMBad' or 'CppAD')}
}
\value{
Output from \code{\link{fit_model}} with DLLs relinked
}
\description{
\code{reload_model} allows a user to save a fitted model, reload it in a new
     R terminal, and then relink the DLLs so that it functions as expected.
}
\examples{
\dontrun{
# Run model
fit = fit_model( ... )
saveRDS( object=fit, file="path_and_name.rds" )

# Reload and relink
fit_new = readRDS( file="path_and_name.rds" )
fit_new = reload_model( x = fit_new )
}

}
